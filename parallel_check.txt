MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map,
c:\users\aryan\github-classroom\cornell-tech-ml\mle-
module-3-aryanpatil1503\minitorch\fast_ops.py (154)
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, c:\users\aryan\github-classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py (154)
-------------------------------------------------------------------------|loop #ID
    def _map(                                                            |
        out: Storage,                                                    |
        out_shape: Shape,                                                |
        out_strides: Strides,                                            |
        in_storage: Storage,                                             |
        in_shape: Shape,                                                 |
        in_strides: Strides,                                             |
    ) -> None:                                                           |
        # TODO: Implement for Task 3.1.                                  |
        # raise NotImplementedError("Need to implement for Task 3.1")    |
        for i in prange(len(out)):---------------------------------------| #2
            out_index = np.zeros(MAX_DIMS, np.int32)---------------------| #0
            in_index = np.zeros(MAX_DIMS, np.int32)----------------------| #1
            to_index(i, out_shape, out_index)                            |
            broadcast_index(out_index, out_shape, in_shape, in_index)    |
            k = index_to_position(out_index, out_strides)                |
            j = index_to_position(in_index, in_strides)                  |
            out[k] = fn(in_storage[j])                                   |
        return                                                           |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #0, #1).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--2 is a parallel loop
   +--0 --> rewritten as a serial loop
   +--1 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (serial)
   +--1 (serial)



Parallel region 0 (loop #2) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#2).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(165) is hoisted out of the parallel loop labelled #2 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(166) is hoisted out of the parallel loop labelled #2 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: in_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip,
c:\users\aryan\github-classroom\cornell-tech-ml\mle-
module-3-aryanpatil1503\minitorch\fast_ops.py (199)
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, c:\users\aryan\github-classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py (199)
------------------------------------------------------------------------|loop #ID
    def _zip(                                                           |
        out: Storage,                                                   |
        out_shape: Shape,                                               |
        out_strides: Strides,                                           |
        a_storage: Storage,                                             |
        a_shape: Shape,                                                 |
        a_strides: Strides,                                             |
        b_storage: Storage,                                             |
        b_shape: Shape,                                                 |
        b_strides: Strides,                                             |
    ) -> None:                                                          |
        # TODO: Implement for Task 3.1.                                 |
        #raise NotImplementedError("Need to implement for Task 3.1")    |
        for i in prange(len(out)):--------------------------------------| #6
            out_index = np.zeros(MAX_DIMS, np.int32)--------------------| #3
            a_index = np.zeros(MAX_DIMS, np.int32)----------------------| #4
            b_index = np.zeros(MAX_DIMS, np.int32)----------------------| #5
            to_index(i, out_shape, out_index)                           |
            broadcast_index(out_index, out_shape, a_shape, a_index)     |
            broadcast_index(out_index, out_shape, b_shape, b_index)     |
            o_idx = index_to_position(out_index, out_strides)           |
            a_idx = index_to_position(a_index, a_strides)               |
            b_idx = index_to_position(b_index, b_strides)               |
            out[o_idx] = fn(a_storage[a_idx], b_storage[b_idx])         |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 4 parallel for-
loop(s) (originating from loops labelled: #6, #3, #4, #5).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--6 is a parallel loop
   +--3 --> rewritten as a serial loop
   +--4 --> rewritten as a serial loop
   +--5 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (parallel)
   +--4 (parallel)
   +--5 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (serial)
   +--4 (serial)
   +--5 (serial)



Parallel region 0 (loop #6) had 0 loop(s) fused and 3 loop(s) serialized as part
 of the larger parallel loop (#6).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(213) is hoisted out of the parallel loop labelled #6 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(214) is hoisted out of the parallel loop labelled #6 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: a_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(215) is hoisted out of the parallel loop labelled #6 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: b_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce,
c:\users\aryan\github-classroom\cornell-tech-ml\mle-
module-3-aryanpatil1503\minitorch\fast_ops.py (246)
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, c:\users\aryan\github-classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py (246)    
---------------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                                       |
        out: Storage,                                                                  |
        out_shape: Shape,                                                              |
        out_strides: Strides,                                                          |
        a_storage: Storage,                                                            |
        a_shape: Shape,                                                                |
        a_strides: Strides,                                                            |
        reduce_dim: int,                                                               |
    ) -> None:                                                                         |
        # TODO: Implement for Task 3.1.                                                |
        #raise NotImplementedError("Need to implement for Task 3.1")                   |
        for i in prange(len(out)):-----------------------------------------------------| #9
            out_index = np.zeros(MAX_DIMS, np.int32)-----------------------------------| #7
            to_index(i, out_shape, out_index)                                          |
            out_pos = index_to_position(out_index, out_strides)                        |
            a_index = out_index.copy()                                                 |
            a_ordinal = index_to_position(a_index, a_strides)                          |
            start = out[out_pos]                                                       |
            for j in prange(a_shape[reduce_dim]):--------------------------------------| #8
                start = fn(a_storage[a_ordinal + j * a_strides[reduce_dim]], start)    |
                out[out_pos] = start                                                   |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #9, #7).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--9 is a parallel loop
   +--8 --> rewritten as a serial loop
   +--7 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--9 (parallel)
   +--8 (parallel)
   +--7 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--9 (parallel)
   +--8 (serial)
   +--7 (serial)



Parallel region 0 (loop #9) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#9).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at c:\users\aryan\github-
classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py
(258) is hoisted out of the parallel loop labelled #9 (it will be performed
before the loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply,
c:\users\aryan\github-classroom\cornell-tech-ml\mle-
module-3-aryanpatil1503\minitorch\fast_ops.py (271)
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, c:\users\aryan\github-classroom\cornell-tech-ml\mle-module-3-aryanpatil1503\minitorch\fast_ops.py (271)
----------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                  |
    out: Storage,                                                                             |
    out_shape: Shape,                                                                         |
    out_strides: Strides,                                                                     |
    a_storage: Storage,                                                                       |
    a_shape: Shape,                                                                           |
    a_strides: Strides,                                                                       |
    b_storage: Storage,                                                                       |
    b_shape: Shape,                                                                           |
    b_strides: Strides,                                                                       |
) -> None:                                                                                    |
    """                                                                                       |
    NUMBA tensor matrix multiply function.                                                    |
                                                                                              |
    Should work for any tensor shapes that broadcast as long as                               |
                                                                                              |
    ```                                                                                       |
    assert a_shape[-1] == b_shape[-2]                                                         |
    ```                                                                                       |
                                                                                              |
    Optimizations:                                                                            |
                                                                                              |
    * Outer loop in parallel                                                                  |
    * No index buffers or function calls                                                      |
    * Inner loop should have no global writes, 1 multiply.                                    |
                                                                                              |
                                                                                              |
    Args:                                                                                     |
        out (Storage): storage for `out` tensor                                               |
        out_shape (Shape): shape for `out` tensor                                             |
        out_strides (Strides): strides for `out` tensor                                       |
        a_storage (Storage): storage for `a` tensor                                           |
        a_shape (Shape): shape for `a` tensor                                                 |
        a_strides (Strides): strides for `a` tensor                                           |
        b_storage (Storage): storage for `b` tensor                                           |
        b_shape (Shape): shape for `b` tensor                                                 |
        b_strides (Strides): strides for `b` tensor                                           |
                                                                                              |
    Returns:                                                                                  |
        None : Fills in `out`                                                                 |
    """                                                                                       |
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                    |
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                    |
    row_a = a_strides[2]                                                                      |
                                                                                              |
    col_b = b_strides[1]                                                                      |
                                                                                              |
    C = a_shape[-1]                                                                           |
                                                                                              |
    # There are no index buffers or function calls                                            |
    for i in prange(0, out_shape[0]):  # Outer loop in parallel-------------------------------| #10
        for j in range(0, out_shape[1]):  # Loop for rows                                     |
            for k in range(0, out_shape[2]):  # Loop for rows                                 |
                                                                                              |
                temp = 0.0                                                                    |
                l = i * a_batch_stride + j * a_strides[1]  # row strides                      |
                m = i * b_batch_stride + k * b_strides[2]  # col strides                      |
                for _ in range(0, C):  # Summation loop with                                  |
                    temp += (                                                                 |
                        a_storage[l] * b_storage[m]                                           |
                    )  # Only one multiply in innermost loop                                  |
                    l += row_a  # Update l                                                    |
                    m += col_b  # Update m                                                    |
                                                                                              |
                out[                                                                          |
                    i * out_strides[0] + j * out_strides[1] + k * out_strides[2]              |
                ] = temp  # Make out for i,j and k equal to our temporary storage variable    |
    # TODO: Implement for Task 3.2.                                                           |
    #raise NotImplementedError("Need to implement for Task 3.2")                              |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #10).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None